{"version":3,"sources":["logo.svg","components/Header.js","components/Items.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","class","Items","incrementCount1","setState","prevState","count1","tot_count","incrementCount2","count2","incrementCount3","count3","decrementCount1","state","decrementCount2","decrementCount3","resetCount1","resetCount2","resetCount3","reset","this","onClick","size","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4IAAAA,EAAOC,QAAU,IAA0B,kC,mJCa5BC,MAXf,WACI,OACI,yBAAKC,UAAU,SACtB,wBAAIC,MAAM,gBACH,4BAAI,kBAAC,IAAD,UCkHGC,E,kDAhHf,aAAc,IAAD,8BACT,gBAUJC,gBAAkB,WACd,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACC,OAASD,EAAUC,OAAS,EAAEC,UAAYF,EAAY,OAbzD,EAgBbG,gBAAkB,WACd,EAAKJ,UAAS,SAAAC,GACV,MAAO,CAACI,OAASJ,EAAUI,OAAS,EAAEF,UAAYF,EAAY,OAlBzD,EAqBbK,gBAAkB,WACd,EAAKN,UAAS,SAAAC,GACV,MAAO,CAACM,OAASN,EAAUM,OAAS,EAAEJ,UAAYF,EAAY,OAvBzD,EA0BbO,gBAAgB,WACa,IAAtB,EAAKC,MAAMP,OACV,EAAKF,SAAS,CACVE,OAAO,IAGV,EAAKF,UAAS,SAAAC,GACf,MAAO,CAACC,OAASD,EAAUC,OAAS,EAAEC,UAAYF,EAAY,OAjCzD,EAqCbS,gBAAiB,WACW,IAArB,EAAKD,MAAMJ,OACV,EAAKL,SAAS,CACVK,OAAO,IAGf,EAAKL,UAAS,SAAAC,GACV,MAAO,CAACI,OAASJ,EAAUI,OAAS,EAAEF,UAAYF,EAAY,OA5CzD,EAgDbU,gBAAgB,WACa,IAAtB,EAAKF,MAAMF,OACV,EAAKP,SAAS,CACVO,OAAO,IAGf,EAAKP,UAAS,SAAAC,GAEV,MAAO,CAACM,OAASN,EAAUM,OAAS,EAAEJ,UAAYF,EAAY,OAxDzD,EA4DbW,YAAa,WACT,EAAKZ,UAAS,SAAAE,GACV,MAAO,CAACA,OAAS,OA9DZ,EAiEbW,YAAa,WACT,EAAKb,UAAS,SAAAK,GACV,MAAO,CAACA,OAAU,OAnEb,EAsEbS,YAAa,WACT,EAAKd,UAAS,SAAAO,GACV,MAAO,CAACA,OAAU,OAxEb,EA2EbQ,MAAO,WACH,EAAKf,UAAS,SAAAG,GACV,MAAO,CAACI,OAAW,EAAEL,OAAW,EAAEG,OAAU,OA3EhD,EAAKI,MAAO,CACRP,OAAO,EACfG,OAAO,EACPE,OAAO,GALM,E,qDAgFA,IAAD,OACR,OACI,yBAAKX,UAAU,WACX,yBAAKC,MAAM,WACd,uBAAGD,UAAU,QAAb,cAAgCoB,KAAKP,MAAMP,OAASc,KAAKP,MAAMJ,OAASW,KAAKP,MAAMF,OAAnF,SAAgG,6BAChG,4BAAQU,QAAS,kBAAM,EAAKF,UAAS,kBAAC,IAAD,CAAaG,KAAM,OACxD,yBAAKtB,UAAU,QAEdoB,KAAKP,MAAMP,OAFZ,IAEoB,qCAC7B,4BAAQN,UAAU,KAAKqB,QAAS,kBAAM,EAAKlB,oBAAmB,kBAAC,IAAD,CAAiBmB,KAAM,MACrF,4BAAQtB,UAAU,KAAKqB,QAAS,kBAAM,EAAKT,oBAAmB,kBAAC,IAAD,CAAgBU,KAAM,MACpF,4BAAQtB,UAAU,KAAKqB,QAAS,kBAAM,EAAKL,gBAAe,kBAAC,IAAD,CAAUM,KAAM,OAGjE,yBAAKtB,UAAU,QACdoB,KAAKP,MAAMJ,OADZ,IACoB,oCAC7B,4BAAQT,UAAU,KAAKqB,QAAS,kBAAM,EAAKb,oBAAmB,kBAAC,IAAD,CAAiBc,KAAM,MACrF,4BAAQtB,UAAU,KAAKqB,QAAS,kBAAM,EAAKP,oBAAmB,kBAAC,IAAD,CAAgBQ,KAAM,MACpF,4BAAQtB,UAAU,KAAKqB,QAAS,kBAAM,EAAKJ,gBAAe,kBAAC,IAAD,CAAUK,KAAM,OAGjE,yBAAKtB,UAAU,QACdoB,KAAKP,MAAMF,OAAO,qCAC5B,4BAAQX,UAAU,KAAKqB,QAAS,kBAAM,EAAKX,oBAAmB,kBAAC,IAAD,CAAiBY,KAAM,MACrF,4BAAStB,UAAU,KAAKqB,QAAS,kBAAM,EAAKN,oBAAmB,kBAAC,IAAD,CAAgBO,KAAM,MACrF,4BAAStB,UAAU,KAAKqB,QAAS,kBAAM,EAAKH,gBAAe,kBAAC,IAAD,CAAUI,KAAM,a,GA1GvDC,aCaLC,E,uKAZb,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANYuB,aCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc3c7de8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { MdAddShoppingCart } from \"react-icons/md\";\r\nfunction Header(){\r\n    return(\r\n        <div className=\"navig\">\r\n <ul class=\"container-ul\">\r\n        <li><MdAddShoppingCart/></li>\r\n        \r\n          </ul>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Header","import React ,  {Component} from'react'\r\n\r\nimport { MdDelete} from \"react-icons/md\";\r\nimport { MdExposurePlus1} from \"react-icons/md\";\r\nimport { MdExposureNeg1} from \"react-icons/md\";\r\nimport { MdAutorenew} from \"react-icons/md\";\r\n\r\nclass Items extends Component{\r\nconstructor(){\r\n    super()\r\n    this.state= { \r\n        count1:0,\r\ncount2:0,\r\ncount3:0,\r\n\r\n    }\r\n}\r\n\r\n\r\nincrementCount1 = () =>{\r\n    this.setState(prevState => {\r\n        return {count1 : prevState.count1 + 1,tot_count : prevState + 1}\r\n    })\r\n}\r\nincrementCount2 = () =>{\r\n    this.setState(prevState => {\r\n        return {count2 : prevState.count2 + 1,tot_count : prevState + 1}\r\n    })\r\n}\r\nincrementCount3 = () =>{\r\n    this.setState(prevState => {\r\n        return {count3 : prevState.count3 + 1,tot_count : prevState + 1}\r\n    })\r\n}\r\ndecrementCount1=()=>{\r\n    if(this.state.count1 === 0){\r\n        this.setState({\r\n            count1:0\r\n        });}\r\n        else{ \r\n         this.setState(prevState => {\r\n        return {count1 : prevState.count1 - 1,tot_count : prevState - 1}\r\n            }\r\n        )\r\n}}\r\ndecrementCount2= ()=>{\r\n    if(this.state.count2 ===0){\r\n        this.setState({\r\n            count2:0\r\n        });}\r\n               else{    \r\n    this.setState(prevState => {\r\n        return {count2 : prevState.count2 - 1,tot_count : prevState - 1}\r\n        \r\n    })}\r\n}\r\ndecrementCount3=()=> {\r\n    if(this.state.count3 === 0){\r\n        this.setState({\r\n            count3:0\r\n        });}\r\n        else{\r\n    this.setState(prevState => {\r\n      \r\n        return {count3 : prevState.count3 - 1,tot_count : prevState - 1}\r\n    })\r\n}\r\n}\r\nresetCount1 =()=>{\r\n    this.setState(count1 =>{\r\n        return {count1 : 0}\r\n    })\r\n}\r\nresetCount2 =()=>{\r\n    this.setState(count2 =>{\r\n        return {count2 :  0}\r\n    })\r\n}\r\nresetCount3 =()=>{\r\n    this.setState(count3 =>{\r\n        return {count3 :  0}\r\n    })\r\n}\r\nreset =()=>{\r\n    this.setState(tot_count =>{\r\n        return {count3  :  0,count1  :  0,count2 :  0}\r\n    })\r\n}\r\n    render(){\r\n    return(\r\n        <div className=\"content\">\r\n            <div class=\"touchup\">\r\n         <p className=\"icon\">  Total :  {this.state.count1 + this.state.count2 + this.state.count3} Items<br />\r\n         <button onClick={() => this.reset()}><MdAutorenew size={25}/></button></p>\r\n         <div className=\"item\">\r\n\r\n         {this.state.count1} <i> Item1</i>\r\n<button className=\"in\" onClick={() => this.incrementCount1()}><MdExposurePlus1 size={20}/></button>\r\n<button className=\"de\" onClick={() => this.decrementCount1()}><MdExposureNeg1 size={20}/></button>\r\n<button className=\"ex\" onClick={() => this.resetCount1()}><MdDelete size={20}/></button>\r\n   \r\n         </div>\r\n         <div className=\"item\">\r\n         {this.state.count2} <i>item2</i>\r\n<button className=\"in\" onClick={() => this.incrementCount2()}><MdExposurePlus1 size={20}/></button>\r\n<button className=\"de\" onClick={() => this.decrementCount2()}><MdExposureNeg1 size={20}/></button>\r\n<button className=\"ex\" onClick={() => this.resetCount2()}><MdDelete size={20}/></button>\r\n   \r\n         </div>\r\n         <div className=\"item\">\r\n         {this.state.count3}<i> Item3</i>\r\n<button className=\"in\" onClick={() => this.incrementCount3()}><MdExposurePlus1 size={20}/></button>\r\n<button  className=\"de\" onClick={() => this.decrementCount3()}><MdExposureNeg1 size={20}/></button>\r\n<button  className=\"ex\" onClick={() => this.resetCount3()}><MdDelete size={20}/></button>\r\n</div>\r\n         </div>\r\n        </div>      \r\n    )\r\n}\r\n}\r\nexport default Items","import React ,  {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Items from './components/Items';\nclass App extends Component{\n  render(){\n   \n  return (\n    <div className=\"App\">\n      <Header/>\n      <Items/>\n      {/*\n      <Footer/>*/\n  }\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}